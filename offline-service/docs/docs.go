// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@fetalmonitory.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/decision": {
            "post": {
                "description": "Сохраняет или отклоняет сохранение данных сессии в базу данных",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Offline Analysis"
                ],
                "summary": "Принять решение о сохранении",
                "parameters": [
                    {
                        "description": "Решение о сохранении",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SaveDecision"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Результат операции",
                        "schema": {
                            "$ref": "#/definitions/models.DecisionResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка обработки",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/session": {
            "get": {
                "description": "Возвращает информацию о сессии (пока заглушка, нужно использовать /upload для получения данных)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Offline Analysis"
                ],
                "summary": "Получить данные сессии",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID сессии",
                        "name": "session_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о сессии",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "description": "Загружает два CSV файла (BPM и UC), выполняет фильтрацию, извлечение признаков и ML предсказание",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Offline Analysis"
                ],
                "summary": "Загрузить CSV файлы для анализа",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV файл с данными FHR (сердцебиение плода)",
                        "name": "bpm_file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "CSV файл с данными UC (маточные сокращения)",
                        "name": "uc_file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID сессии (генерируется автоматически если не указан)",
                        "name": "session_id",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Результат анализа",
                        "schema": {
                            "$ref": "#/definitions/models.UploadResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка обработки",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Acceleration": {
            "type": "object",
            "properties": {
                "amplitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "number"
                },
                "end": {
                    "type": "number"
                },
                "start": {
                    "type": "number"
                }
            }
        },
        "models.CTGAnalysis": {
            "type": "object",
            "properties": {
                "accel_decel_ratio": {
                    "type": "number"
                },
                "accelerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Acceleration"
                    }
                },
                "baseline_heart_rate": {
                    "type": "number"
                },
                "bpm_trend": {
                    "type": "number"
                },
                "contractions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Contraction"
                    }
                },
                "data_points": {
                    "type": "integer"
                },
                "decelerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Deceleration"
                    }
                },
                "filtered_bpm_batch": {
                    "$ref": "#/definitions/models.MetricRecord"
                },
                "filtered_uterus_batch": {
                    "$ref": "#/definitions/models.MetricRecord"
                },
                "late_deceleration_ratio": {
                    "type": "number"
                },
                "late_decelerations": {
                    "type": "integer"
                },
                "ltv": {
                    "type": "number"
                },
                "ltvs": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "ltvs_window_duration": {
                    "type": "number"
                },
                "stv": {
                    "type": "number"
                },
                "stv_trend": {
                    "type": "number"
                },
                "stvs": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "stvs_window_duration": {
                    "type": "number"
                },
                "time_span_sec": {
                    "type": "number"
                },
                "total_accelerations": {
                    "type": "integer"
                },
                "total_contractions": {
                    "type": "integer"
                },
                "total_decelerations": {
                    "type": "integer"
                }
            }
        },
        "models.Contraction": {
            "type": "object",
            "properties": {
                "amplitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "number"
                },
                "end": {
                    "type": "number"
                },
                "start": {
                    "type": "number"
                }
            }
        },
        "models.Deceleration": {
            "type": "object",
            "properties": {
                "amplitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "number"
                },
                "end": {
                    "type": "number"
                },
                "is_late": {
                    "type": "boolean"
                },
                "start": {
                    "type": "number"
                }
            }
        },
        "models.DecisionResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.MetricRecord": {
            "type": "object",
            "properties": {
                "time_sec": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "models.SaveDecision": {
            "type": "object",
            "properties": {
                "save": {
                    "type": "boolean"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "models.UploadResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "prediction": {
                    "type": "number"
                },
                "records": {
                    "$ref": "#/definitions/models.CTGAnalysis"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Offline Medical Service API",
	Description:      "API для загрузки и анализа CSV файлов с медицинскими данными (FHR и UC)\n\n## Описание\nЭтот сервис обрабатывает CSV файлы с данными о сердцебиении плода (BPM) и маточными сокращениями (UC).\nВыполняет фильтрацию, анализ признаков и ML предсказание.\n",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
