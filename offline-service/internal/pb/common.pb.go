// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Представление временного ряда метрики
type MetricRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeSec       []float64              `protobuf:"fixed64,1,rep,packed,name=time_sec,json=timeSec,proto3" json:"time_sec,omitempty"` // Время в секундах
	Value         []float64              `protobuf:"fixed64,2,rep,packed,name=value,proto3" json:"value,omitempty"`                    // Значения метрики
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricRecord) Reset() {
	*x = MetricRecord{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricRecord) ProtoMessage() {}

func (x *MetricRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricRecord.ProtoReflect.Descriptor instead.
func (*MetricRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *MetricRecord) GetTimeSec() []float64 {
	if x != nil {
		return x.TimeSec
	}
	return nil
}

func (x *MetricRecord) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Медицинские данные в новом формате
type MedicalRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bpm           *MetricRecord          `protobuf:"bytes,1,opt,name=bpm,proto3" json:"bpm,omitempty"`       // Сердцебиение (FHR)
	Uterus        *MetricRecord          `protobuf:"bytes,2,opt,name=uterus,proto3" json:"uterus,omitempty"` // Сокращения матки (UC)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MedicalRecord) Reset() {
	*x = MedicalRecord{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedicalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecord) ProtoMessage() {}

func (x *MedicalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecord.ProtoReflect.Descriptor instead.
func (*MedicalRecord) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *MedicalRecord) GetBpm() *MetricRecord {
	if x != nil {
		return x.Bpm
	}
	return nil
}

func (x *MedicalRecord) GetUterus() *MetricRecord {
	if x != nil {
		return x.Uterus
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

const file_common_proto_rawDesc = "" +
	"\n" +
	"\fcommon.proto\x12\x06common\"?\n" +
	"\fMetricRecord\x12\x19\n" +
	"\btime_sec\x18\x01 \x03(\x01R\atimeSec\x12\x14\n" +
	"\x05value\x18\x02 \x03(\x01R\x05value\"e\n" +
	"\rMedicalRecord\x12&\n" +
	"\x03bpm\x18\x01 \x01(\v2\x14.common.MetricRecordR\x03bpm\x12,\n" +
	"\x06uterus\x18\x02 \x01(\v2\x14.common.MetricRecordR\x06uterusB\x06Z\x04./pbb\x06proto3"

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData []byte
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)))
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_common_proto_goTypes = []any{
	(*MetricRecord)(nil),  // 0: common.MetricRecord
	(*MedicalRecord)(nil), // 1: common.MedicalRecord
}
var file_common_proto_depIdxs = []int32{
	0, // 0: common.MedicalRecord.bpm:type_name -> common.MetricRecord
	0, // 1: common.MedicalRecord.uterus:type_name -> common.MetricRecord
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
