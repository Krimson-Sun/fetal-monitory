package main

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	"offline-service/config"
	"offline-service/internal/handler"
	"offline-service/internal/pb"
	"offline-service/internal/repository"
	"offline-service/internal/service"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg := config.LoadConfig()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–µ–∫ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	redisRepo := repository.NewRedisStub(cfg.RedisTTL)
	defer redisRepo.Close()

	postgresRepo := repository.NewPostgresStub()
	defer postgresRepo.Close()

	log.Println("üöÄ Using STUB repositories (Redis & PostgreSQL)")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ)
	filterConn, err := grpc.NewClient(cfg.FilterServiceAddr,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("‚ö†Ô∏è  Failed to connect to filter service: %v", err)
		log.Println("‚ö†Ô∏è  Make sure filter stub is running on", cfg.FilterServiceAddr)
	} else {
		defer filterConn.Close()
	}

	mlConn, err := grpc.NewClient(cfg.MLServiceAddr,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("‚ö†Ô∏è  Failed to connect to ML service: %v", err)
		log.Println("‚ö†Ô∏è  Make sure ML stub is running on", cfg.MLServiceAddr)
	} else {
		defer mlConn.Close()
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
	var medicalService *service.MedicalService

	if filterConn != nil && mlConn != nil {
		medicalService = service.NewMedicalService(
			pb.NewFilterServiceClient(filterConn),
			pb.NewMLServiceClient(mlConn),
			redisRepo,
			postgresRepo,
		)
		log.Printf("‚úÖ Connected to gRPC services: %s, %s", cfg.FilterServiceAddr, cfg.MLServiceAddr)
	} else {
		log.Println("‚ùå Running without gRPC services - some functionality will be limited")
		// –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å —Å nil –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –≤ –∫–æ–¥–µ
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Ö–µ–Ω–¥–ª–µ—Ä–∞
	httpHandler := handler.NewHTTPHandler(medicalService)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	mux := http.NewServeMux()
	mux.HandleFunc("/upload", httpHandler.UploadDualCSV)
	mux.HandleFunc("/upload-dual", httpHandler.UploadDualCSV)
	mux.HandleFunc("/decision", httpHandler.HandleDecision)
	mux.HandleFunc("/session", httpHandler.GetSessionData) // –ù–æ–≤—ã–π endpoint

	// –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥–ª—É—à–µ–∫
	mux.HandleFunc("/debug/stats", func(w http.ResponseWriter, r *http.Request) {
		stats := map[string]interface{}{
			"redis":     redisRepo.GetStats(),
			"postgres":  postgresRepo.GetStats(),
			"timestamp": time.Now().Format(time.RFC3339),
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(stats)
	})

	handlerWithCORS := enableCORS(mux)
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	server := &http.Server{
		Addr:         ":" + cfg.HTTPPort,
		Handler:      handlerWithCORS,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Graceful shutdown
	go func() {
		log.Printf("‚úÖ Medical service starting on port %s", cfg.HTTPPort)
		log.Printf("‚úÖ Using STUB repositories")
		log.Printf("‚úÖ Debug stats available at http://localhost:%s/debug/stats", cfg.HTTPPort)

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("‚ùå Server failed: %v", err)
		}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("üõë Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("‚ùå Server forced to shutdown: %v", err)
	}

	log.Println("‚úÖ Server exited gracefully")
}

func enableCORS(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

		if r.Method == "OPTIONS" {
			return
		}

		next.ServeHTTP(w, r)
	})
}
