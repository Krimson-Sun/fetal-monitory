// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/feature_extractor/feature_extractor.proto

package featureextractorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureExtractorService_ProcessBatch_FullMethodName       = "/feature_extractor.v1.FeatureExtractorService/ProcessBatch"
	FeatureExtractorService_ProcessBatchStream_FullMethodName = "/feature_extractor.v1.FeatureExtractorService/ProcessBatchStream"
	FeatureExtractorService_ResetCollector_FullMethodName     = "/feature_extractor.v1.FeatureExtractorService/ResetCollector"
)

// FeatureExtractorServiceClient is the client API for FeatureExtractorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для извлечения медицинских признаков из данных мониторинга плода
type FeatureExtractorServiceClient interface {
	// Отправляет батч данных для обработки и получает обработанные метрики
	ProcessBatch(ctx context.Context, in *ProcessBatchRequest, opts ...grpc.CallOption) (*ProcessBatchResponse, error)
	// Стрим для обработки батчей в реальном времени
	ProcessBatchStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessBatchRequest, ProcessBatchResponse], error)
	// Сброс состояния коллектора (начало новой сессии)
	ResetCollector(ctx context.Context, in *ResetCollectorRequest, opts ...grpc.CallOption) (*ResetCollectorResponse, error)
}

type featureExtractorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureExtractorServiceClient(cc grpc.ClientConnInterface) FeatureExtractorServiceClient {
	return &featureExtractorServiceClient{cc}
}

func (c *featureExtractorServiceClient) ProcessBatch(ctx context.Context, in *ProcessBatchRequest, opts ...grpc.CallOption) (*ProcessBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessBatchResponse)
	err := c.cc.Invoke(ctx, FeatureExtractorService_ProcessBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureExtractorServiceClient) ProcessBatchStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessBatchRequest, ProcessBatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureExtractorService_ServiceDesc.Streams[0], FeatureExtractorService_ProcessBatchStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessBatchRequest, ProcessBatchResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureExtractorService_ProcessBatchStreamClient = grpc.BidiStreamingClient[ProcessBatchRequest, ProcessBatchResponse]

func (c *featureExtractorServiceClient) ResetCollector(ctx context.Context, in *ResetCollectorRequest, opts ...grpc.CallOption) (*ResetCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetCollectorResponse)
	err := c.cc.Invoke(ctx, FeatureExtractorService_ResetCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureExtractorServiceServer is the server API for FeatureExtractorService service.
// All implementations must embed UnimplementedFeatureExtractorServiceServer
// for forward compatibility.
//
// Сервис для извлечения медицинских признаков из данных мониторинга плода
type FeatureExtractorServiceServer interface {
	// Отправляет батч данных для обработки и получает обработанные метрики
	ProcessBatch(context.Context, *ProcessBatchRequest) (*ProcessBatchResponse, error)
	// Стрим для обработки батчей в реальном времени
	ProcessBatchStream(grpc.BidiStreamingServer[ProcessBatchRequest, ProcessBatchResponse]) error
	// Сброс состояния коллектора (начало новой сессии)
	ResetCollector(context.Context, *ResetCollectorRequest) (*ResetCollectorResponse, error)
	mustEmbedUnimplementedFeatureExtractorServiceServer()
}

// UnimplementedFeatureExtractorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureExtractorServiceServer struct{}

func (UnimplementedFeatureExtractorServiceServer) ProcessBatch(context.Context, *ProcessBatchRequest) (*ProcessBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBatch not implemented")
}
func (UnimplementedFeatureExtractorServiceServer) ProcessBatchStream(grpc.BidiStreamingServer[ProcessBatchRequest, ProcessBatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessBatchStream not implemented")
}
func (UnimplementedFeatureExtractorServiceServer) ResetCollector(context.Context, *ResetCollectorRequest) (*ResetCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCollector not implemented")
}
func (UnimplementedFeatureExtractorServiceServer) mustEmbedUnimplementedFeatureExtractorServiceServer() {
}
func (UnimplementedFeatureExtractorServiceServer) testEmbeddedByValue() {}

// UnsafeFeatureExtractorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureExtractorServiceServer will
// result in compilation errors.
type UnsafeFeatureExtractorServiceServer interface {
	mustEmbedUnimplementedFeatureExtractorServiceServer()
}

func RegisterFeatureExtractorServiceServer(s grpc.ServiceRegistrar, srv FeatureExtractorServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeatureExtractorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureExtractorService_ServiceDesc, srv)
}

func _FeatureExtractorService_ProcessBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureExtractorServiceServer).ProcessBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureExtractorService_ProcessBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureExtractorServiceServer).ProcessBatch(ctx, req.(*ProcessBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureExtractorService_ProcessBatchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FeatureExtractorServiceServer).ProcessBatchStream(&grpc.GenericServerStream[ProcessBatchRequest, ProcessBatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureExtractorService_ProcessBatchStreamServer = grpc.BidiStreamingServer[ProcessBatchRequest, ProcessBatchResponse]

func _FeatureExtractorService_ResetCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureExtractorServiceServer).ResetCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureExtractorService_ResetCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureExtractorServiceServer).ResetCollector(ctx, req.(*ResetCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureExtractorService_ServiceDesc is the grpc.ServiceDesc for FeatureExtractorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureExtractorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feature_extractor.v1.FeatureExtractorService",
	HandlerType: (*FeatureExtractorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessBatch",
			Handler:    _FeatureExtractorService_ProcessBatch_Handler,
		},
		{
			MethodName: "ResetCollector",
			Handler:    _FeatureExtractorService_ResetCollector_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessBatchStream",
			Handler:       _FeatureExtractorService_ProcessBatchStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/feature_extractor/feature_extractor.proto",
}
