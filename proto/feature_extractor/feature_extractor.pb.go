// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/feature_extractor/feature_extractor.proto

package featureextractorv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Точка данных с временной меткой и значением
type DataPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeSec       float64                `protobuf:"fixed64,1,opt,name=time_sec,json=timeSec,proto3" json:"time_sec,omitempty"` // Время в секундах
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`                    // Значение измерения
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{0}
}

func (x *DataPoint) GetTimeSec() float64 {
	if x != nil {
		return x.TimeSec
	}
	return 0
}

func (x *DataPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Запрос на обработку батча
type ProcessBatchRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Идентификатор сессии
	// Данные ЧСС (может быть пустым если нет данных FHR в батче)
	BpmData []*DataPoint `protobuf:"bytes,2,rep,name=bpm_data,json=bpmData,proto3" json:"bpm_data,omitempty"`
	// Данные маточных сокращений (может быть пустым если нет данных UC в батче)
	UterusData []*DataPoint `protobuf:"bytes,3,rep,name=uterus_data,json=uterusData,proto3" json:"uterus_data,omitempty"`
	// Временная метка батча
	BatchTsMs     uint64 `protobuf:"varint,4,opt,name=batch_ts_ms,json=batchTsMs,proto3" json:"batch_ts_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessBatchRequest) Reset() {
	*x = ProcessBatchRequest{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBatchRequest) ProtoMessage() {}

func (x *ProcessBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBatchRequest.ProtoReflect.Descriptor instead.
func (*ProcessBatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessBatchRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProcessBatchRequest) GetBpmData() []*DataPoint {
	if x != nil {
		return x.BpmData
	}
	return nil
}

func (x *ProcessBatchRequest) GetUterusData() []*DataPoint {
	if x != nil {
		return x.UterusData
	}
	return nil
}

func (x *ProcessBatchRequest) GetBatchTsMs() uint64 {
	if x != nil {
		return x.BatchTsMs
	}
	return 0
}

// Ответ с обработанными метриками
type ProcessBatchResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`    // Идентификатор сессии
	BatchTsMs uint64                 `protobuf:"varint,2,opt,name=batch_ts_ms,json=batchTsMs,proto3" json:"batch_ts_ms,omitempty"` // Временная метка обработанного батча
	// Основные метрики
	Stv               float64 `protobuf:"fixed64,3,opt,name=stv,proto3" json:"stv,omitempty"`                                                        // Short-Term Variability
	Ltv               float64 `protobuf:"fixed64,4,opt,name=ltv,proto3" json:"ltv,omitempty"`                                                        // Long-Term Variability
	BaselineHeartRate float64 `protobuf:"fixed64,5,opt,name=baseline_heart_rate,json=baselineHeartRate,proto3" json:"baseline_heart_rate,omitempty"` // Базовая ЧСС
	// События
	Accelerations []*Acceleration `protobuf:"bytes,6,rep,name=accelerations,proto3" json:"accelerations,omitempty"` // Акселерации
	Decelerations []*Deceleration `protobuf:"bytes,7,rep,name=decelerations,proto3" json:"decelerations,omitempty"` // Децелерации
	Contractions  []*Contraction  `protobuf:"bytes,8,rep,name=contractions,proto3" json:"contractions,omitempty"`   // Маточные сокращения
	// Временные ряды метрик
	Stvs               []float64 `protobuf:"fixed64,9,rep,packed,name=stvs,proto3" json:"stvs,omitempty"`                                                   // Массив STV по окнам
	StvsWindowDuration float64   `protobuf:"fixed64,10,opt,name=stvs_window_duration,json=stvsWindowDuration,proto3" json:"stvs_window_duration,omitempty"` // Длительность окна STV в секундах
	Ltvs               []float64 `protobuf:"fixed64,11,rep,packed,name=ltvs,proto3" json:"ltvs,omitempty"`                                                  // Массив LTV по окнам
	LtvsWindowDuration float64   `protobuf:"fixed64,12,opt,name=ltvs_window_duration,json=ltvsWindowDuration,proto3" json:"ltvs_window_duration,omitempty"` // Длительность окна LTV в секундах
	// Статистика
	TotalDecelerations    int32   `protobuf:"varint,13,opt,name=total_decelerations,json=totalDecelerations,proto3" json:"total_decelerations,omitempty"`             // Общее количество децелераций
	LateDecelerations     int32   `protobuf:"varint,14,opt,name=late_decelerations,json=lateDecelerations,proto3" json:"late_decelerations,omitempty"`                // Количество поздних децелераций
	LateDecelerationRatio float64 `protobuf:"fixed64,15,opt,name=late_deceleration_ratio,json=lateDecelerationRatio,proto3" json:"late_deceleration_ratio,omitempty"` // Доля поздних децелераций
	TotalAccelerations    int32   `protobuf:"varint,16,opt,name=total_accelerations,json=totalAccelerations,proto3" json:"total_accelerations,omitempty"`             // Общее количество акселераций
	AccelDecelRatio       float64 `protobuf:"fixed64,17,opt,name=accel_decel_ratio,json=accelDecelRatio,proto3" json:"accel_decel_ratio,omitempty"`                   // Соотношение акселераций к децелерациям
	TotalContractions     int32   `protobuf:"varint,18,opt,name=total_contractions,json=totalContractions,proto3" json:"total_contractions,omitempty"`                // Общее количество сокращений
	// Тренды
	StvTrend float64 `protobuf:"fixed64,19,opt,name=stv_trend,json=stvTrend,proto3" json:"stv_trend,omitempty"` // Тренд STV
	BpmTrend float64 `protobuf:"fixed64,20,opt,name=bpm_trend,json=bpmTrend,proto3" json:"bpm_trend,omitempty"` // Тренд ЧСС
	// Мета-информация
	DataPoints  int32   `protobuf:"varint,21,opt,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`       // Количество точек данных
	TimeSpanSec float64 `protobuf:"fixed64,22,opt,name=time_span_sec,json=timeSpanSec,proto3" json:"time_span_sec,omitempty"` // Длительность наблюдений в секундах
	// Отфильтрованные данные для передачи на фронтенд
	FilteredBpmBatch    []*DataPoint `protobuf:"bytes,23,rep,name=filtered_bpm_batch,json=filteredBpmBatch,proto3" json:"filtered_bpm_batch,omitempty"`          // Отфильтрованный батч ЧСС
	FilteredUterusBatch []*DataPoint `protobuf:"bytes,24,rep,name=filtered_uterus_batch,json=filteredUterusBatch,proto3" json:"filtered_uterus_batch,omitempty"` // Отфильтрованный батч маточных сокращений
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProcessBatchResponse) Reset() {
	*x = ProcessBatchResponse{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessBatchResponse) ProtoMessage() {}

func (x *ProcessBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessBatchResponse.ProtoReflect.Descriptor instead.
func (*ProcessBatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessBatchResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ProcessBatchResponse) GetBatchTsMs() uint64 {
	if x != nil {
		return x.BatchTsMs
	}
	return 0
}

func (x *ProcessBatchResponse) GetStv() float64 {
	if x != nil {
		return x.Stv
	}
	return 0
}

func (x *ProcessBatchResponse) GetLtv() float64 {
	if x != nil {
		return x.Ltv
	}
	return 0
}

func (x *ProcessBatchResponse) GetBaselineHeartRate() float64 {
	if x != nil {
		return x.BaselineHeartRate
	}
	return 0
}

func (x *ProcessBatchResponse) GetAccelerations() []*Acceleration {
	if x != nil {
		return x.Accelerations
	}
	return nil
}

func (x *ProcessBatchResponse) GetDecelerations() []*Deceleration {
	if x != nil {
		return x.Decelerations
	}
	return nil
}

func (x *ProcessBatchResponse) GetContractions() []*Contraction {
	if x != nil {
		return x.Contractions
	}
	return nil
}

func (x *ProcessBatchResponse) GetStvs() []float64 {
	if x != nil {
		return x.Stvs
	}
	return nil
}

func (x *ProcessBatchResponse) GetStvsWindowDuration() float64 {
	if x != nil {
		return x.StvsWindowDuration
	}
	return 0
}

func (x *ProcessBatchResponse) GetLtvs() []float64 {
	if x != nil {
		return x.Ltvs
	}
	return nil
}

func (x *ProcessBatchResponse) GetLtvsWindowDuration() float64 {
	if x != nil {
		return x.LtvsWindowDuration
	}
	return 0
}

func (x *ProcessBatchResponse) GetTotalDecelerations() int32 {
	if x != nil {
		return x.TotalDecelerations
	}
	return 0
}

func (x *ProcessBatchResponse) GetLateDecelerations() int32 {
	if x != nil {
		return x.LateDecelerations
	}
	return 0
}

func (x *ProcessBatchResponse) GetLateDecelerationRatio() float64 {
	if x != nil {
		return x.LateDecelerationRatio
	}
	return 0
}

func (x *ProcessBatchResponse) GetTotalAccelerations() int32 {
	if x != nil {
		return x.TotalAccelerations
	}
	return 0
}

func (x *ProcessBatchResponse) GetAccelDecelRatio() float64 {
	if x != nil {
		return x.AccelDecelRatio
	}
	return 0
}

func (x *ProcessBatchResponse) GetTotalContractions() int32 {
	if x != nil {
		return x.TotalContractions
	}
	return 0
}

func (x *ProcessBatchResponse) GetStvTrend() float64 {
	if x != nil {
		return x.StvTrend
	}
	return 0
}

func (x *ProcessBatchResponse) GetBpmTrend() float64 {
	if x != nil {
		return x.BpmTrend
	}
	return 0
}

func (x *ProcessBatchResponse) GetDataPoints() int32 {
	if x != nil {
		return x.DataPoints
	}
	return 0
}

func (x *ProcessBatchResponse) GetTimeSpanSec() float64 {
	if x != nil {
		return x.TimeSpanSec
	}
	return 0
}

func (x *ProcessBatchResponse) GetFilteredBpmBatch() []*DataPoint {
	if x != nil {
		return x.FilteredBpmBatch
	}
	return nil
}

func (x *ProcessBatchResponse) GetFilteredUterusBatch() []*DataPoint {
	if x != nil {
		return x.FilteredUterusBatch
	}
	return nil
}

// Акселерация ЧСС
type Acceleration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         float64                `protobuf:"fixed64,1,opt,name=start,proto3" json:"start,omitempty"`         // Индекс начала
	End           float64                `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`             // Индекс окончания
	Duration      float64                `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`   // Длительность в секундах
	Amplitude     float64                `protobuf:"fixed64,4,opt,name=amplitude,proto3" json:"amplitude,omitempty"` // Амплитуда в ударах/минуту
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Acceleration) Reset() {
	*x = Acceleration{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Acceleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acceleration) ProtoMessage() {}

func (x *Acceleration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acceleration.ProtoReflect.Descriptor instead.
func (*Acceleration) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{3}
}

func (x *Acceleration) GetStart() float64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Acceleration) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Acceleration) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Acceleration) GetAmplitude() float64 {
	if x != nil {
		return x.Amplitude
	}
	return 0
}

// Децелерация ЧСС
type Deceleration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         float64                `protobuf:"fixed64,1,opt,name=start,proto3" json:"start,omitempty"`                // Индекс начала
	End           float64                `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`                    // Индекс окончания
	Duration      float64                `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`          // Длительность в секундах
	Amplitude     float64                `protobuf:"fixed64,4,opt,name=amplitude,proto3" json:"amplitude,omitempty"`        // Амплитуда в ударах/минуту
	IsLate        bool                   `protobuf:"varint,5,opt,name=is_late,json=isLate,proto3" json:"is_late,omitempty"` // Является ли поздней децелерацией
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deceleration) Reset() {
	*x = Deceleration{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deceleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deceleration) ProtoMessage() {}

func (x *Deceleration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deceleration.ProtoReflect.Descriptor instead.
func (*Deceleration) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{4}
}

func (x *Deceleration) GetStart() float64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Deceleration) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Deceleration) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Deceleration) GetAmplitude() float64 {
	if x != nil {
		return x.Amplitude
	}
	return 0
}

func (x *Deceleration) GetIsLate() bool {
	if x != nil {
		return x.IsLate
	}
	return false
}

// Маточное сокращение
type Contraction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         float64                `protobuf:"fixed64,1,opt,name=start,proto3" json:"start,omitempty"`         // Индекс начала
	End           float64                `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`             // Индекс окончания
	Duration      float64                `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`   // Длительность в секундах
	Amplitude     float64                `protobuf:"fixed64,4,opt,name=amplitude,proto3" json:"amplitude,omitempty"` // Амплитуда сокращения
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contraction) Reset() {
	*x = Contraction{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contraction) ProtoMessage() {}

func (x *Contraction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contraction.ProtoReflect.Descriptor instead.
func (*Contraction) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{5}
}

func (x *Contraction) GetStart() float64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Contraction) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Contraction) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Contraction) GetAmplitude() float64 {
	if x != nil {
		return x.Amplitude
	}
	return 0
}

// Запрос на сброс коллектора
type ResetCollectorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Идентификатор сессии
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetCollectorRequest) Reset() {
	*x = ResetCollectorRequest{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetCollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCollectorRequest) ProtoMessage() {}

func (x *ResetCollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCollectorRequest.ProtoReflect.Descriptor instead.
func (*ResetCollectorRequest) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{6}
}

func (x *ResetCollectorRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Ответ на сброс коллектора
type ResetCollectorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Успешность операции
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // Сообщение об операции
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetCollectorResponse) Reset() {
	*x = ResetCollectorResponse{}
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCollectorResponse) ProtoMessage() {}

func (x *ResetCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feature_extractor_feature_extractor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCollectorResponse.ProtoReflect.Descriptor instead.
func (*ResetCollectorResponse) Descriptor() ([]byte, []int) {
	return file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP(), []int{7}
}

func (x *ResetCollectorResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResetCollectorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_feature_extractor_feature_extractor_proto protoreflect.FileDescriptor

const file_proto_feature_extractor_feature_extractor_proto_rawDesc = "" +
	"\n" +
	"/proto/feature_extractor/feature_extractor.proto\x12\x14feature_extractor.v1\"<\n" +
	"\tDataPoint\x12\x19\n" +
	"\btime_sec\x18\x01 \x01(\x01R\atimeSec\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\"\xd2\x01\n" +
	"\x13ProcessBatchRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12:\n" +
	"\bbpm_data\x18\x02 \x03(\v2\x1f.feature_extractor.v1.DataPointR\abpmData\x12@\n" +
	"\vuterus_data\x18\x03 \x03(\v2\x1f.feature_extractor.v1.DataPointR\n" +
	"uterusData\x12\x1e\n" +
	"\vbatch_ts_ms\x18\x04 \x01(\x04R\tbatchTsMs\"\xd7\b\n" +
	"\x14ProcessBatchResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1e\n" +
	"\vbatch_ts_ms\x18\x02 \x01(\x04R\tbatchTsMs\x12\x10\n" +
	"\x03stv\x18\x03 \x01(\x01R\x03stv\x12\x10\n" +
	"\x03ltv\x18\x04 \x01(\x01R\x03ltv\x12.\n" +
	"\x13baseline_heart_rate\x18\x05 \x01(\x01R\x11baselineHeartRate\x12H\n" +
	"\raccelerations\x18\x06 \x03(\v2\".feature_extractor.v1.AccelerationR\raccelerations\x12H\n" +
	"\rdecelerations\x18\a \x03(\v2\".feature_extractor.v1.DecelerationR\rdecelerations\x12E\n" +
	"\fcontractions\x18\b \x03(\v2!.feature_extractor.v1.ContractionR\fcontractions\x12\x12\n" +
	"\x04stvs\x18\t \x03(\x01R\x04stvs\x120\n" +
	"\x14stvs_window_duration\x18\n" +
	" \x01(\x01R\x12stvsWindowDuration\x12\x12\n" +
	"\x04ltvs\x18\v \x03(\x01R\x04ltvs\x120\n" +
	"\x14ltvs_window_duration\x18\f \x01(\x01R\x12ltvsWindowDuration\x12/\n" +
	"\x13total_decelerations\x18\r \x01(\x05R\x12totalDecelerations\x12-\n" +
	"\x12late_decelerations\x18\x0e \x01(\x05R\x11lateDecelerations\x126\n" +
	"\x17late_deceleration_ratio\x18\x0f \x01(\x01R\x15lateDecelerationRatio\x12/\n" +
	"\x13total_accelerations\x18\x10 \x01(\x05R\x12totalAccelerations\x12*\n" +
	"\x11accel_decel_ratio\x18\x11 \x01(\x01R\x0faccelDecelRatio\x12-\n" +
	"\x12total_contractions\x18\x12 \x01(\x05R\x11totalContractions\x12\x1b\n" +
	"\tstv_trend\x18\x13 \x01(\x01R\bstvTrend\x12\x1b\n" +
	"\tbpm_trend\x18\x14 \x01(\x01R\bbpmTrend\x12\x1f\n" +
	"\vdata_points\x18\x15 \x01(\x05R\n" +
	"dataPoints\x12\"\n" +
	"\rtime_span_sec\x18\x16 \x01(\x01R\vtimeSpanSec\x12M\n" +
	"\x12filtered_bpm_batch\x18\x17 \x03(\v2\x1f.feature_extractor.v1.DataPointR\x10filteredBpmBatch\x12S\n" +
	"\x15filtered_uterus_batch\x18\x18 \x03(\v2\x1f.feature_extractor.v1.DataPointR\x13filteredUterusBatch\"p\n" +
	"\fAcceleration\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x01R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x01R\x03end\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x01R\bduration\x12\x1c\n" +
	"\tamplitude\x18\x04 \x01(\x01R\tamplitude\"\x89\x01\n" +
	"\fDeceleration\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x01R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x01R\x03end\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x01R\bduration\x12\x1c\n" +
	"\tamplitude\x18\x04 \x01(\x01R\tamplitude\x12\x17\n" +
	"\ais_late\x18\x05 \x01(\bR\x06isLate\"o\n" +
	"\vContraction\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x01R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x01R\x03end\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x01R\bduration\x12\x1c\n" +
	"\tamplitude\x18\x04 \x01(\x01R\tamplitude\"6\n" +
	"\x15ResetCollectorRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"L\n" +
	"\x16ResetCollectorResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2\xde\x02\n" +
	"\x17FeatureExtractorService\x12e\n" +
	"\fProcessBatch\x12).feature_extractor.v1.ProcessBatchRequest\x1a*.feature_extractor.v1.ProcessBatchResponse\x12o\n" +
	"\x12ProcessBatchStream\x12).feature_extractor.v1.ProcessBatchRequest\x1a*.feature_extractor.v1.ProcessBatchResponse(\x010\x01\x12k\n" +
	"\x0eResetCollector\x12+.feature_extractor.v1.ResetCollectorRequest\x1a,.feature_extractor.v1.ResetCollectorResponseB\x17Z\x15./;featureextractorv1b\x06proto3"

var (
	file_proto_feature_extractor_feature_extractor_proto_rawDescOnce sync.Once
	file_proto_feature_extractor_feature_extractor_proto_rawDescData []byte
)

func file_proto_feature_extractor_feature_extractor_proto_rawDescGZIP() []byte {
	file_proto_feature_extractor_feature_extractor_proto_rawDescOnce.Do(func() {
		file_proto_feature_extractor_feature_extractor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_feature_extractor_feature_extractor_proto_rawDesc), len(file_proto_feature_extractor_feature_extractor_proto_rawDesc)))
	})
	return file_proto_feature_extractor_feature_extractor_proto_rawDescData
}

var file_proto_feature_extractor_feature_extractor_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_feature_extractor_feature_extractor_proto_goTypes = []any{
	(*DataPoint)(nil),              // 0: feature_extractor.v1.DataPoint
	(*ProcessBatchRequest)(nil),    // 1: feature_extractor.v1.ProcessBatchRequest
	(*ProcessBatchResponse)(nil),   // 2: feature_extractor.v1.ProcessBatchResponse
	(*Acceleration)(nil),           // 3: feature_extractor.v1.Acceleration
	(*Deceleration)(nil),           // 4: feature_extractor.v1.Deceleration
	(*Contraction)(nil),            // 5: feature_extractor.v1.Contraction
	(*ResetCollectorRequest)(nil),  // 6: feature_extractor.v1.ResetCollectorRequest
	(*ResetCollectorResponse)(nil), // 7: feature_extractor.v1.ResetCollectorResponse
}
var file_proto_feature_extractor_feature_extractor_proto_depIdxs = []int32{
	0,  // 0: feature_extractor.v1.ProcessBatchRequest.bpm_data:type_name -> feature_extractor.v1.DataPoint
	0,  // 1: feature_extractor.v1.ProcessBatchRequest.uterus_data:type_name -> feature_extractor.v1.DataPoint
	3,  // 2: feature_extractor.v1.ProcessBatchResponse.accelerations:type_name -> feature_extractor.v1.Acceleration
	4,  // 3: feature_extractor.v1.ProcessBatchResponse.decelerations:type_name -> feature_extractor.v1.Deceleration
	5,  // 4: feature_extractor.v1.ProcessBatchResponse.contractions:type_name -> feature_extractor.v1.Contraction
	0,  // 5: feature_extractor.v1.ProcessBatchResponse.filtered_bpm_batch:type_name -> feature_extractor.v1.DataPoint
	0,  // 6: feature_extractor.v1.ProcessBatchResponse.filtered_uterus_batch:type_name -> feature_extractor.v1.DataPoint
	1,  // 7: feature_extractor.v1.FeatureExtractorService.ProcessBatch:input_type -> feature_extractor.v1.ProcessBatchRequest
	1,  // 8: feature_extractor.v1.FeatureExtractorService.ProcessBatchStream:input_type -> feature_extractor.v1.ProcessBatchRequest
	6,  // 9: feature_extractor.v1.FeatureExtractorService.ResetCollector:input_type -> feature_extractor.v1.ResetCollectorRequest
	2,  // 10: feature_extractor.v1.FeatureExtractorService.ProcessBatch:output_type -> feature_extractor.v1.ProcessBatchResponse
	2,  // 11: feature_extractor.v1.FeatureExtractorService.ProcessBatchStream:output_type -> feature_extractor.v1.ProcessBatchResponse
	7,  // 12: feature_extractor.v1.FeatureExtractorService.ResetCollector:output_type -> feature_extractor.v1.ResetCollectorResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_feature_extractor_feature_extractor_proto_init() }
func file_proto_feature_extractor_feature_extractor_proto_init() {
	if File_proto_feature_extractor_feature_extractor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_feature_extractor_feature_extractor_proto_rawDesc), len(file_proto_feature_extractor_feature_extractor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_feature_extractor_feature_extractor_proto_goTypes,
		DependencyIndexes: file_proto_feature_extractor_feature_extractor_proto_depIdxs,
		MessageInfos:      file_proto_feature_extractor_feature_extractor_proto_msgTypes,
	}.Build()
	File_proto_feature_extractor_feature_extractor_proto = out.File
	file_proto_feature_extractor_feature_extractor_proto_goTypes = nil
	file_proto_feature_extractor_feature_extractor_proto_depIdxs = nil
}
